{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Covidscope reimplementation theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust The reimplementation process is straightforward. You only need three separate files to start. Input file: Metadata Count matrix UMAP coordinates Example input files are provided for your reference. Input files needed to be in .csv format. We assume that users have analyzed their data in one of the most popular software Seurat in R. You can output your three input files from your Seurat object by: * Metadata: your own metadata file in .csv format i.e. meta.csv * Count matrix: # https://stackoverflow.com/questions/4558277/write-a-sparse-matrix-to-a-csv-in-r colnames(dense_matrix) <- c(\u201cgene_name\u201d, \u201cbarcode\u201d,\u201dexpression\u201d) write.csv(dense_matrix, file=\u201dmatrix.csv\u201d, row.names=FALSE) UMAP: If you have run the UMAP step, otherwise please refer to Seurat UMAP method and run it first. umap_coord <- dplyr::as_tibble(data.frame(seurat_object@reductions$umap@cell.embeddings), rownames = \"id\") colnames(umap_coord) <- c(\u201did\u201c, \u201cUMAP1\u201d,\u201dUMAP2\u201d) write.csv(umap_coord, file=\u201dumap.csv\u201d, row.names=FALSE) Input file content: **File name** **Collection name** **Columns** metadata.csv single_cell_meta_v4 [\"id\", \"meta_age_category\", \"meta_sample_id2\",\"meta_patient_id\", \"meta_dataset\", \"level2\", \"meta_severity\", \"meta_days_from_onset_of_symptoms\", \"meta_outcome\", \"meta_gender\", \"Country\"] matrix.csv matrix [\"barcode\", \"gene_name\",\"expression\"] umap.csv umap [\"UMAP1\",\"UMAP2\", \"id\"] Database collection **Column name** **Value format** **Description** **Example** Collection schema: **single_cell_meta_v4** id String Cell barcode (unique) meta_patient_id String Patient identifier meta_sample_id2 String Sample identifier (one patient may have multiple samples) Country String Country origin of the dataset meta_age_category String Age category in intervals e.g. \u201c18-30\u201d level2 String Cell type predictions meta_severity String The severity of the symptoms regarding patient meta_dataset String Dataset origin meta_days_from_onset_of_symptoms Number Days from the onset of symptoms meta_gender String Gender i.e. \u201cfemale\u201d or \u201cmale\u201d meta_outcome String Health outcome i.e. \u201cdiseased\u201d, \u201cdischarged\u201d etc. Collection schema: **umap** id String Cell barcode (unique) UMAP1 String X-coordinate of the cell UMAP2 String Y-coordiante of the cell Collection schema: **matrix** barcode String Cell barcode (unique) gene_name String Name of the gene expressed in the cell e.g. CD19 expression Number Dependencies: MongoDB installed Python installed MongoDB Compass installed Reimplementation steps: Create a database named cov19atlas_new, and create three collections namely under the database: single_cell_meta_v4 umap matrix Import the three datasets into MongoDB using MongoDB Compass single_cell_meta_v4 (meta.csv) umap (umap.csv) matrix (matrix.csv) All data field during import needs to be in STRING format. Activate the virtual environment if you created $ git clone ... $ pip install -r requirements.txt $ export FLASK_ENV=development $ export FLASK_APP=manage.py $ flask run You will have local version of Covidscope running at 127.0.0.1:5000 by default.","title":"Covidscope reimplementation"},{"location":"#covidscope-reimplementation","text":"theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust The reimplementation process is straightforward. You only need three separate files to start.","title":"Covidscope reimplementation"},{"location":"#input-file","text":"Metadata Count matrix UMAP coordinates Example input files are provided for your reference. Input files needed to be in .csv format. We assume that users have analyzed their data in one of the most popular software Seurat in R. You can output your three input files from your Seurat object by: * Metadata: your own metadata file in .csv format i.e. meta.csv * Count matrix: # https://stackoverflow.com/questions/4558277/write-a-sparse-matrix-to-a-csv-in-r colnames(dense_matrix) <- c(\u201cgene_name\u201d, \u201cbarcode\u201d,\u201dexpression\u201d) write.csv(dense_matrix, file=\u201dmatrix.csv\u201d, row.names=FALSE) UMAP: If you have run the UMAP step, otherwise please refer to Seurat UMAP method and run it first. umap_coord <- dplyr::as_tibble(data.frame(seurat_object@reductions$umap@cell.embeddings), rownames = \"id\") colnames(umap_coord) <- c(\u201did\u201c, \u201cUMAP1\u201d,\u201dUMAP2\u201d) write.csv(umap_coord, file=\u201dumap.csv\u201d, row.names=FALSE)","title":"Input file:"},{"location":"#input-file-content","text":"**File name** **Collection name** **Columns** metadata.csv single_cell_meta_v4 [\"id\", \"meta_age_category\", \"meta_sample_id2\",\"meta_patient_id\", \"meta_dataset\", \"level2\", \"meta_severity\", \"meta_days_from_onset_of_symptoms\", \"meta_outcome\", \"meta_gender\", \"Country\"] matrix.csv matrix [\"barcode\", \"gene_name\",\"expression\"] umap.csv umap [\"UMAP1\",\"UMAP2\", \"id\"]","title":"Input file content:"},{"location":"#database-collection","text":"**Column name** **Value format** **Description** **Example** Collection schema: **single_cell_meta_v4** id String Cell barcode (unique) meta_patient_id String Patient identifier meta_sample_id2 String Sample identifier (one patient may have multiple samples) Country String Country origin of the dataset meta_age_category String Age category in intervals e.g. \u201c18-30\u201d level2 String Cell type predictions meta_severity String The severity of the symptoms regarding patient meta_dataset String Dataset origin meta_days_from_onset_of_symptoms Number Days from the onset of symptoms meta_gender String Gender i.e. \u201cfemale\u201d or \u201cmale\u201d meta_outcome String Health outcome i.e. \u201cdiseased\u201d, \u201cdischarged\u201d etc. Collection schema: **umap** id String Cell barcode (unique) UMAP1 String X-coordinate of the cell UMAP2 String Y-coordiante of the cell Collection schema: **matrix** barcode String Cell barcode (unique) gene_name String Name of the gene expressed in the cell e.g. CD19 expression Number","title":"Database collection"},{"location":"#dependencies","text":"MongoDB installed Python installed MongoDB Compass installed","title":"Dependencies:"},{"location":"#reimplementation-steps","text":"Create a database named cov19atlas_new, and create three collections namely under the database: single_cell_meta_v4 umap matrix Import the three datasets into MongoDB using MongoDB Compass single_cell_meta_v4 (meta.csv) umap (umap.csv) matrix (matrix.csv) All data field during import needs to be in STRING format.","title":"Reimplementation steps:"},{"location":"#activate-the-virtual-environment-if-you-created","text":"$ git clone ... $ pip install -r requirements.txt $ export FLASK_ENV=development $ export FLASK_APP=manage.py $ flask run You will have local version of Covidscope running at 127.0.0.1:5000 by default.","title":"Activate the virtual environment if you created"}]}